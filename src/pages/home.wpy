<template>
  <view class="container">
    <!--自动轮播控件 indicator-active-color当前选中指示点颜色,indicator-dots是否显示面板指示点,autoplay是否自动切换,interval自动切换时间间隔,duration滑动动画时长,circular是否采用衔接滑动-->
    <swiper class="swiper" indicator-active-color="{{indicatorActiveColor}}"
            indicator-dots="{{indicatorDots}}" autoplay="{{autoplay}}" interval="{{interval}}"
            duration="{{duration}}" circular="true">
      <!--需要wx:key的情况:列表中项目的位置会动态改变或者有新的项目添加到列表中
        希望列表中的项目保持自己的特征和状态（如 <input/> 中的输入内容，<switch/> 的选中状态）
        需要使用 wx:key 来指定列表中项目的唯一的标识符。
        2.可不需要wx:key的情况:
        如果明确知道该列表是静态，或者不必关注其顺序，可以不用加wx:key，忽略如下的警告-->
      <block wx:for="{{adList}}" wx:key="key">
        <!--swiper-item仅放置在swiper组件中,宽高自动设置成100%-->
        <swiper-item>
          <!--在组件中绑定一个事件处理函数,等于小程序的bindtap="goToAdvert(参数)"-->
          <image src="{{item.picUrl}}" class="slide-image" @tap="goToAdvert({{item.advertUrl}})"/>
        </swiper-item>
      </block>
    </swiper>
    <view class="pos">
      <view class="search_read_only">
        <!--navigator页面跳转组件,open-type跳转方式,navigate对应wx.navigateTo,url跳转链接-->
        <navigator class="search_content" open-type="navigate" url="/pages/search">
          <!--引用style/icon.less的样式中的iconfont样式,icon-search是搜索小图标,i标签是约定俗成的小图标标签-->
          <i class="iconfont icon-search"></i>
          <view class="search_input">搜索商品</view>
        </navigator>
        <navigator class="message" url="/pages/messages">
          <!--class="iconfont icon-message cfff">按照出现的先后顺序，后边的公有样式会覆盖掉前面的 -->
          <i class="iconfont icon-message cfff"></i>
          <view class="doc cfff">消息</view>
        </navigator>
      </view>
    </view>
    <view class="nav_list">
      <navigator open-type="navigate" url="/pages/sign_in">
        <image src="../images/icon_nav_01_new.png" class="nav_icon"></image>
        <view class="nav_text">签到有礼</view>
      </navigator>
      <navigator open-type="navigate" url="/pages/exchange_goods">
        <image src="../images/icon_nav_02_new.png" class="nav_icon"></image>
        <view class="nav_text">换货专区</view>
      </navigator>
      <navigator open-type="navigate" url="/pages/wholesale">
        <image src="../images/icon_nav_03_new.png" class="nav_icon"></image>
        <view class="nav_text">特价专区</view>
      </navigator>
      <navigator open-type="navigate" url="/pages/replenishment_goods">
        <image src="../images/icon_nav_04_new.png" class="nav_icon"></image>
        <view class="nav_text">我要补货</view>
      </navigator>
    </view>
    <!--发现好商品模块,将父控件的数据discoverList绑定到子控件中props的list数据中-->
    <discover :list.sync="discoverList"></discover>
    <view class="recommend-title">商品推荐</view>
    <!--加载更多时动画-->
    <bottomLoadMore :show.sync="showLoading" message="正在加载"></bottomLoadMore>
    <!--暂无数据显示-->
    <placeholder :show.sync="is_empty" message="暂无发现数据"></placeholder>
    <!--弹屏  types:0图片1领红包   show 是否显示  @close 关闭回调  @callback 点击图片回调 或确定回调-->
    <!--.sync修饰符来达到父组件数据绑定至子组件的效果，也可以通过设置子组件props的twoWay: true来达到子组件数据绑定至父组件的效果-->
    <!--使用.user修饰符为自定义组件绑定事件，如：@customEvent.user="myFn"其中，@表示事件修饰符，customEvent 表示事件名称，.user表示事件后缀。通过$emit触发-->
    <bombscreen :types.sync="tps" :show.sync="is_show_alert" @close.user="closeAlert"
                @callback.user="alertCallback"></bombscreen>
  </view>
</template>
<script>
  import wepy from 'wepy';
  import api from '../api/api';
  import tip from '../utils/tip'
  import Discover from '../components/discover'
  import Bombscreen from '../components/bomb_screen'
  import BottomLoadMore from "../components/common/bottomLoadMore"
  import Placeholder from "../components/common/placeholder"
  export default class Home extends wepy.page {
    config = {
      navigationBarTitleText: '素洁服装厂',
    }
    components = {
      //发现商品组件
      discover: Discover,
      bottomLoadMore: BottomLoadMore,
      placeholder: Placeholder,
      //弹窗组件
      bombscreen: Bombscreen
    }
    data = {

      imgUrls: [
        '../images/image_demo.png',
      ],
      indicatorDots: true,
      autoplay: true,
      interval: 3000,
      duration: 1000,
      indicatorActiveColor: "#fff",
      discoverList: [],
      //是否有数据
      is_empty: false,
      //当前页面
      currentPage: 1,
      //总页数
      page_total: 0,
      //是否显示 底部loading
      showLoading: true,
      //防止重复加载
      preventRepeatReuqest: false,
      //广告列表
      adList: [],
      tps: 0,
      is_show_alert: true
    }

    async getDiscoverList(currentPage, size) {
      let that = this;
//      console.log('sleep');
//      await that.sleep(3);
//      console.log('sleep12');
      //调用api类中的方法发起微信接口请求,query是请求参数,返回的json数据
      const json = await api.getHomeDisvocerList({
        query: {
          page: currentPage || 1,
          size: size || 10
        }
      });
      if (json.data.code == 0) {
        that.discoverList = [...that.discoverList, ...json.data.list];

        if (json.data.page_total) { // 后台的数据不再返回page_total
          that.page_total = json.data.page_total
        }
        if (json.data.page_total == 0) {
          //暂无数据
          that.is_empty = true;
        }
        that.$apply();
      } else {
        tip.error(json.data.msg);
      }
      that.showLoading = false;
    }

    sleep(time) {
      return new Promise((resolve, reject) => setTimeout(() => resolve, time * 1000));
    }

    async getAdList() {
      const json = await api.getAdList({
        query: {}
      });
      if (json.data.code == 0) {
        this.adList = json.data.list;
        this.$apply();
      } else {
      }
    }

    onLoad() {
      let that = this;
      this.discoverList = [];
      that.getDiscoverList();
      this.getAdList();
    }

    computed = {}
    //事件处理函数(集中保存在methods对象中)
    methods = {
      goToAdvert(url) {
        console.log("url===" + url);
        if (url.length == 0) {
          return;
        }
        //navigateTo保留当前页面，跳转到应用内的某个页面，使用wx.navigateBack可以返回到原页面。
        wepy.navigateTo({
          url: url
        })
      },
      //分享,小程序的api
      onShareAppMessage: function (res) {
        if (res.from === 'button') {
          // 来自页面内转发按钮
          console.log(res.target)
        }
        return {
          title: '素洁服装厂',
          path: '/pages/home',
          success: function (res) {
            // 转发成功
          },
          fail: function (res) {
            // 转发失败
          }
        }
      },
      alertCallback() {
        tip.alert('跳转');
      },
      closeAlert() {
        tip.alert('关闭');
      }
    }
    events = {}
    //加载更多
    onReachBottom() {
      let that = this;
      that.showLoading = true;
      console.log(that.page_total + "===" + that.currentPage);
      //判断总页数是否大于翻页数
      if ((that.page_total) > that.currentPage) {
        //防止重复加载
        if (that.preventRepeatReuqest) {
          return true;
        }
        that.preventRepeatReuqest = true;
        that.currentPage++;
        that.getDiscoverList(that.currentPage);
        that.preventRepeatReuqest = false;
      } else {
        that.showLoading = false;
      }
    };
  }

</script>
<!--less样式引用需要加上lang="less"-->
<style lang="less">
  .swiper {
    height: ~"348rpx";
  }

  .slide-image {
    width: 100%;
    height: 100%;
  }

  /*less的嵌套样式
  pos表示父class为pos的样式,大括号最外层就是pos的样式
  search_content,message,doc是父标签下面的子标签的class样式
  */
  .pos {
    position: absolute;
    top: ~"0rpx";
    left: 0;
    right: 0;
    .search_content {
      background: rgba(0, 0, 0, 0.1);
      border: ~"1px" solid #efefee;
      .icon-search,
      .search_input {
        color: #efefee;
      }
    }
    .message {
      display: block;
      text-align: center;
      margin-left: ~"20rpx";
    }
    .doc {
      font-size: ~"16rpx";
      display: block;
    }
  }

  .nav_list {
    color: #404040;
    display: flex;
    font-size: ~"26rpx";
    justify-content: space-around;
    padding: ~"17rpx" ~"50rpx";
    navigator {
      text-align: center;
      .nav_icon {
      height: ~"80rpx";
      margin: 0 auto;
      width: ~"80rpx";
      margin-bottom: ~"14rpx";
    }
    .nav_text {
      font-size: ~"26rpx"
      }
    }

  }

  .recommend-title {
    padding: ~"40rpx" 0;
    text-align: center;
    color: #333;
  }

</style>
